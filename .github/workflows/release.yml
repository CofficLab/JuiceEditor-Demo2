---
name: 🚀 Release

on:
  push:
    branches: [main]
    tags:
      - '*'
  workflow_run:
    workflows:
      - '⬆️ Update'
    types:
      - completed

permissions:
  contents: write

env:
  tag: ${{ github.event.head_commit.id }}
  should_release: true

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    steps:
      - run: echo 'The triggering workflow passed'
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'The triggering workflow failed'

  build:
    runs-on: ubuntu-latest
    needs: [on-success]
    steps:
      - name: 当前用户
        run: whoami
      - name: Checkout
        uses: actions/checkout@v4
      - name: NPM 版本
        run: npm -v
      - name: 安装PNPM
        run: npm i -g pnpm
      - name: NPM 安装
        run: pnpm i
      - name: NPM 构建
        run: npm run build
      - name: 上传构件
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

  tag:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: 当前用户
        run: whoami
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 生成标签
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          max_attempts=3
          attempt=1
          success=false

          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            # Get the next version number
            next_version=$(npm version patch --no-git-tag-version)
            echo "Attempting version: $next_version (Attempt $attempt/$max_attempts)"
            
            # Check if tag exists
            if git ls-remote --exit-code --tags origin "refs/tags/$next_version" >/dev/null 2>&1; then
              echo "Tag $next_version already exists, trying next version"
              attempt=$((attempt + 1))
            else
              # Tag doesn't exist, create it
              git commit -m "👷 CI: Upgrade to $next_version"
              git tag -a "$next_version" -m "👷 CI: Upgrade to $next_version"
              git push origin main --tags
              success=true
            fi
          done

          if [ "$success" = false ]; then
            echo "All attempted versions already exist. Skipping tag creation."
            exit 0
          fi
      - name: 读取版本，写入文件
        run: |
          version=$(node -p "require('./package.json').version")
          echo $version
          echo "${version}" >> version.txt
      - name: 上传构件
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
          retention-days: 1

  rebase_dev:
    needs:
      - tag
    runs-on: ubuntu-latest
    steps:
      - name: 拉取 main 分支
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 配置 Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Rebase dev on main
        run: |
          # Check if the dev branch exists
          if git ls-remote --exit-code --heads origin dev; then
            git fetch origin dev
            git checkout -b dev origin/dev
            git rebase origin/main
            git push origin dev --force
          else
            echo "Dev branch does not exist. Creating dev branch from main."
            git checkout -b dev
            git push origin dev
          fi
        continue-on-error: true

  release:
    runs-on: ubuntu-latest
    needs: [tag]
    steps:
      - uses: actions/checkout@v4
      - name: 下载版本构件
        uses: actions/download-artifact@v4
        with:
          name: version
          path: temp
      - run: ls -alhR
      - name: 读取版本号
        run: |

          version=$(cat temp/version.txt)
          echo $version

          # 写入环境变量
          echo "tag=v$version" >> $GITHUB_ENV
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag }}
          files: |
            ./**/*.dmg
            ./**/*.zip
            ./**/*.exe
            ./**/*.pkg
            ./**/*.deb
            ./**/*.ipa
            ./**/*.AppImage
            ./**/*.snap

  clear:
    needs:
      - release
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: 当前用户
        run: whoami
      - name: 清理构件
        uses: geekyeggo/delete-artifact@v4
        with:
          token: ${{ github.token }}
          name: |
            dist
            version
